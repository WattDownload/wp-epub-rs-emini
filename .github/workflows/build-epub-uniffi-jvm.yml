name: EPUB [Uniffi] | Rust CI | JVM

on:
  push:
    branches: [ "main" ]
    paths:
      - 'wp-mini-epub-uniffi/src/**'
      - 'wp-mini-epub-uniffi/Cargo.toml'
      - 'wp-mini-epub-uniffi/.cargo/**'
      
  pull_request:
    branches: [ "main" ]
    paths:
      - 'wp-mini-epub-uniffi/src/**'
      - 'wp-mini-epub-uniffi/Cargo.toml'
      - 'wp-mini-epub-uniffi/.cargo/**'

  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  WORKING_DIR: ./wp-mini-epub-uniffi

jobs:
  rust-build-windows:
    runs-on: windows-2025

    defaults:
      run:
        shell: pwsh
        working-directory: ${{ env.WORKING_DIR }}
        
    steps:
    - uses: actions/checkout@v5

    - name: Install toolchain
      run: rustup target add x86_64-pc-windows-msvc

    - name: Build
      run: cargo build --release
      
    - name: Generate Kotlin Bindings
      run: cargo run --release --features=uniffi/cli --bin uniffi-bindgen generate --library target/release/uniffi_wp_epub_mini.dll --language kotlin --out-dir ./bindings/

    - name: Organize Artifacts
      run: |
        # Create the directory for the native library
        New-Item -ItemType Directory -Force -Path "nativeLibs"
        
        # Move the compiled DLL to the new directory
        # The crate name from Cargo.toml is 'uniffi_wp_epub_mini'
        Move-Item -Path "target/release/uniffi_wp_epub_mini.dll" -Destination "nativeLibs/"

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: epub-uniffi-builds-windows-x86_64
        path: |
          ${{ env.WORKING_DIR }}/nativeLibs
          ${{ env.WORKING_DIR }}/bindings
        if-no-files-found: error

  rust-build-linux:
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: ${{ env.WORKING_DIR }}

    steps:
    - uses: actions/checkout@v5

    - name: Install system dependencies
      run: sudo apt-get update && sudo apt-get install -y build-essential

    - name: Install toolchain
      run: rustup target add x86_64-unknown-linux-gnu

    - name: Build
      run: cargo build --release
      
    - name: Generate Kotlin Bindings
      run: cargo run --release --features=uniffi/cli --bin uniffi-bindgen generate --library target/release/uniffi_wp_epub_mini.dll --language kotlin --out-dir ./bindings/

    - name: Organize Artifacts
      run: |
        # Create the directory for the native library
        mkdir -p "nativeLibs"
        
        # Move the compiled .so file
        # Note the 'lib' prefix and '.so' extension for Linux
        mv "target/release/libuniffi_wp_epub_mini.so" "nativeLibs/"

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: epub-uniffi-builds-linux-x86_64
        path: |
          ${{ env.WORKING_DIR }}/nativeLibs
          ${{ env.WORKING_DIR }}/bindings
        if-no-files-found: error

  rust-build-macos-aarch64:
    runs-on: macos-15
    
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.WORKING_DIR }}

    steps:
    - uses: actions/checkout@v5

    - name: Install toolchain
      run: rustup target add aarch64-apple-darwin

    - name: Build
      run: cargo build --release
      
    - name: Generate Kotlin Bindings
      run: cargo run --release --features=uniffi/cli --bin uniffi-bindgen generate --library target/release/uniffi_wp_epub_mini.dll --language kotlin --out-dir ./bindings/

    - name: Organize Artifacts
      run: |
        # Create the directory for the native library
        mkdir -p "nativeLibs"
        
        # Move the compiled .dylib file
        # Note the 'lib' prefix and '.dylib' extension for macOS
        mv "target/release/libuniffi_wp_epub_mini.dylib" "nativeLibs/"

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: epub-uniffi-builds-macos-aarch64
        path: |
          ${{ env.WORKING_DIR }}/nativeLibs
          ${{ env.WORKING_DIR }}/bindings
        if-no-files-found: error
