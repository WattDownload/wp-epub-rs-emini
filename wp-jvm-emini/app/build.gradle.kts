/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/9.1.0/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    alias(libs.plugins.kotlin.jvm)
    alias(libs.plugins.kotlinx.serialization)

    // Apply the application plugin to add support for building a CLI application in Java.
    application
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {

    implementation("org.slf4j:slf4j-nop:2.1.0-alpha1")

    implementation("net.java.dev.jna:jna:5.18.1")

    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.10.2")
    runtimeOnly("org.jetbrains.kotlinx:kotlinx-coroutines-swing:1.10.2")

    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.9.0")

    implementation(platform("com.squareup.okhttp3:okhttp-bom:5.3.0"))
    implementation("com.squareup.okhttp3:okhttp")
    implementation("com.squareup.okhttp3:okhttp-coroutines")

    implementation("com.formdev:flatlaf-fonts-jetbrains-mono:2.304")
    implementation("com.formdev:flatlaf-extras:3.6.2")
    implementation("com.github.weisj:jsvg:2.0.0")
    implementation("com.formdev:flatlaf:3.6.2")

    implementation("io.github.dj-raven:modal-dialog:2.5.2")

    implementation("vip.zhifen:jsysthemedetector:2.0.0")
}

testing {
    suites {
        // Configure the built-in test suite
        val test by getting(JvmTestSuite::class) {
            // Use Kotlin Test test framework
            useKotlinTest("2.3.0-Beta1")
        }
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(24)
    }
}

application {
    // Define the main class for the application.
    mainClass.set("us.wprust.jvm.Main")
}

// Configure tasks that run on the JVM
tasks.withType<JavaExec> {
    jvmArgs("--enable-native-access=ALL-UNNAMED")
}

// Configure test tasks specifically
tasks.withType<Test> {
    jvmArgs("--enable-native-access=ALL-UNNAMED")
}

// Define a common configuration block for all JAR tasks to avoid repetition
val fatJarConfig: Jar.() -> Unit = {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes(
            "Main-Class" to application.mainClass.get()
        )
    }

    // Add application's own compiled .class files and resources.
    from(sourceSets.main.get().output)

    // Add all runtime dependencies (unpacks their JARs).
    from({
        configurations.runtimeClasspath.get().map { if (it.isDirectory) it else zipTree(it) }
    })
}

// Disable the default 'jar' task to avoid confusion
tasks.jar {
    enabled = false
}

// Task to build the JAR for Windows
tasks.register<Jar>("jarWindows") {
    apply(fatJarConfig) // This will include all 3 native files at first
    group = "build"
    description = "Builds the JAR with the Windows x86_64 native library."
    archiveAppendix.set("windows-x86_64")

    // Now, remove the ones we don't want for Windows
    exclude("libuniffi_wp_epub_mini.so")
    exclude("libuniffi_wp_epub_mini.dylib")
}

// Task to build the JAR for Linux
tasks.register<Jar>("jarLinux") {
    apply(fatJarConfig)
    group = "build"
    description = "Builds the JAR with the Linux x86_64 native library."
    archiveAppendix.set("linux-x86_64")

    // Remove the ones we don't want for Linux
    exclude("uniffi_wp_epub_mini.dll")
    exclude("libuniffi_wp_epub_mini.dylib")
}

// Task to build the JAR for macOS
tasks.register<Jar>("jarMacos") {
    apply(fatJarConfig)
    group = "build"
    description = "Builds the JAR with the macOS aarch64 native library."
    archiveAppendix.set("macos-aarch64")

    // Remove the ones we don't want for macOS
    exclude("uniffi_wp_epub_mini.dll")
    exclude("libuniffi_wp_epub_mini.so")
}

// A convenient task to build all platform-specific JARs at once
tasks.register("jarAll") {
    group = "build"
    description = "Builds JARs for all supported desktop platforms."
    dependsOn("jarWindows", "jarLinux", "jarMacos")
}
